CCS PCM C Compiler, Version 4.074, 38112               16-jan-20 16:00

               Filename: C:\Users\marlon\Desktop\PROJETO - X\Nova pasta\CONTROLE.lst

               ROM used: 1634 words (20%)
                         Largest free fragment is 2048
               RAM used: 16 (4%) at main() level
                         32 (9%) worst case
               Stack:    5 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   3BD
0003:  NOP
.................... /*###############_PROGRAMA MEDIDOR DE TENSÃO AC_################# 
.................... #                                                               # 
.................... #  AUTOR: MARLON HLATCHUK TAVARES                               # 
.................... #  FORMAÇÃO: TÉCNOLOGO EM MECATRÔNICA INDUSTRIAL                # 
.................... #  DATA: 06/12/2013                                             # 
.................... #                                                               # 
.................... ################################################################# 
....................  
.................... COMANDOS DO LCD: 
.................... lcd_ini()                        // Inicializa LCD; 
.................... lcd_pos_xy( byte x, byte y)      // Posição de texto (x, y); 
.................... lcd_escreve( char c)             // Função de escrita no LCD; 
.................... */ 
....................  
.................... #include <16f877A.h> // Biblioteca microcontrolador; 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device ADC=10;      // Configura Adc para 10 bits; 
.................... #include <mod_lcd.c> // Biblioteca do display lcd; 
.................... /************************************************************************/ 
.................... /*  MOD_LCD.C - Biblioteca de manipulação de módulo LCD                 */ 
.................... /*                                                                      */ 
.................... /*  Autor: Fábio Pereira                                                */ 
.................... /*                                                                      */ 
.................... /************************************************************************/ 
.................... #use    delay (clock=3000000) //referencia de clock do oscilador  
*
0051:  MOVLW  2C
0052:  MOVWF  04
0053:  BCF    03.7
0054:  MOVF   00,W
0055:  BTFSC  03.2
0056:  GOTO   05E
0057:  MOVLW  F8
0058:  MOVWF  77
0059:  DECFSZ 77,F
005A:  GOTO   059
005B:  GOTO   05C
005C:  DECFSZ 00,F
005D:  GOTO   057
005E:  RETLW  00
.................... // As definições a seguir são utilizadas para acesso aos pinos do display 
.................... // caso o pino RW não seja utilizado, comente a definição lcd_rw 
.................... #ifndef lcd_enable 
....................    #define lcd_enable     pin_b0      // pino enable do LCD 
....................    #define lcd_rs         pin_b1      // pino rs do LCD 
....................    //#define lcd_rw      pin_e2      // pino rw do LCD 
....................    #define lcd_d4         pin_b4      // pino de dados d4 do LCD 
....................    #define lcd_d5         pin_b5      // pino de dados d5 do LCD 
....................    #define lcd_d6         pin_b6      // pino de dados d6 do LCD 
....................    #define lcd_d7         pin_b7      // pino de dados d7 do LCD 
....................    #endif 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 linhas 
.................... #define lcd_seg_lin 0x40    // Endereço da segunda linha na RAM do LCD 
....................  
.................... // a constante abaixo define a seqüência de inicialização do módulo LCD 
.................... byte CONST INI_LCD[4] = {0x20 | (lcd_type << 2), 0xf, 1, 6}; 
....................  
.................... byte lcd_le_byte() 
.................... // lê um byte do LCD (somente com pino RW) 
.................... { 
....................    byte dado; 
....................    // configura os pinos de dados como entradas 
....................    input(lcd_d4); 
....................    input(lcd_d5); 
....................    input(lcd_d6); 
....................    input(lcd_d7); 
....................    // se o pino rw for utilizado, coloca em 1 
....................    #ifdef lcd_rw 
....................       output_high(lcd_rw); 
....................    #endif 
....................    output_high(lcd_enable); // habilita display 
....................    dado = 0;   // zera a variável de leitura 
....................    // lê os quatro bits mais significativos 
....................    if (input(lcd_d7)) bit_set(dado,7); 
....................    if (input(lcd_d6)) bit_set(dado,6); 
....................    if (input(lcd_d5)) bit_set(dado,5); 
....................    if (input(lcd_d4)) bit_set(dado,4); 
....................    // dá um pulso na linha enable 
....................    output_low(lcd_enable); 
....................    output_high(lcd_enable); 
....................    // lê os quatro bits menos significativos 
....................    if (input(lcd_d7)) bit_set(dado,3); 
....................    if (input(lcd_d6)) bit_set(dado,2); 
....................    if (input(lcd_d5)) bit_set(dado,1); 
....................    if (input(lcd_d4)) bit_set(dado,0); 
....................    output_low(lcd_enable);   // desabilita o display 
....................    return dado;   // retorna o byte lido 
.................... } 
....................  
.................... void lcd_envia_nibble( byte dado ) 
.................... // envia um dado de quatro bits para o display 
.................... { 
....................    // coloca os quatro bits nas saidas 
....................    output_bit(lcd_d4,bit_test(dado,0)); 
005F:  BTFSC  33.0
0060:  GOTO   063
0061:  BCF    06.4
0062:  GOTO   064
0063:  BSF    06.4
0064:  BSF    03.5
0065:  BCF    06.4
....................    output_bit(lcd_d5,bit_test(dado,1)); 
0066:  BCF    03.5
0067:  BTFSC  33.1
0068:  GOTO   06B
0069:  BCF    06.5
006A:  GOTO   06C
006B:  BSF    06.5
006C:  BSF    03.5
006D:  BCF    06.5
....................    output_bit(lcd_d6,bit_test(dado,2)); 
006E:  BCF    03.5
006F:  BTFSC  33.2
0070:  GOTO   073
0071:  BCF    06.6
0072:  GOTO   074
0073:  BSF    06.6
0074:  BSF    03.5
0075:  BCF    06.6
....................    output_bit(lcd_d7,bit_test(dado,3)); 
0076:  BCF    03.5
0077:  BTFSC  33.3
0078:  GOTO   07B
0079:  BCF    06.7
007A:  GOTO   07C
007B:  BSF    06.7
007C:  BSF    03.5
007D:  BCF    06.7
....................    // dá um pulso na linha enable 
....................    output_high(lcd_enable); 
007E:  BCF    06.0
007F:  BCF    03.5
0080:  BSF    06.0
....................    output_low(lcd_enable); 
0081:  BSF    03.5
0082:  BCF    06.0
0083:  BCF    03.5
0084:  BCF    06.0
.................... } 
0085:  RETLW  00
....................  
....................  
.................... void lcd_envia_byte( boolean endereco, byte dado ) 
.................... { 
....................    // coloca a linha rs em 0 
....................    output_low(lcd_rs); 
0086:  BSF    03.5
0087:  BCF    06.1
0088:  BCF    03.5
0089:  BCF    06.1
....................    // aguarda o display ficar desocupado 
....................    //while ( bit_test(lcd_le_byte(),7) ) ; 
....................    // configura a linha rs dependendo do modo selecionado 
....................    output_bit(lcd_rs,endereco); 
008A:  MOVF   30,F
008B:  BTFSS  03.2
008C:  GOTO   08F
008D:  BCF    06.1
008E:  GOTO   090
008F:  BSF    06.1
0090:  BSF    03.5
0091:  BCF    06.1
....................    delay_us(100);   // aguarda 100 us 
0092:  MOVLW  18
0093:  MOVWF  77
0094:  DECFSZ 77,F
0095:  GOTO   094
0096:  GOTO   097
....................    // caso a linha rw esteja definida, coloca em 0 
....................    #ifdef lcd_rw 
....................       output_low(lcd_rw); 
....................    #endif 
....................    // desativa linha enable 
....................    output_low(lcd_enable); 
0097:  BCF    06.0
0098:  BCF    03.5
0099:  BCF    06.0
....................    // envia a primeira parte do byte 
....................    lcd_envia_nibble(dado >> 4); 
009A:  SWAPF  31,W
009B:  MOVWF  32
009C:  MOVLW  0F
009D:  ANDWF  32,F
009E:  MOVF   32,W
009F:  MOVWF  33
00A0:  CALL   05F
....................    // envia a segunda parte do byte 
....................    lcd_envia_nibble(dado & 0x0f); 
00A1:  MOVF   31,W
00A2:  ANDLW  0F
00A3:  MOVWF  32
00A4:  MOVWF  33
00A5:  CALL   05F
.................... } 
00A6:  RETLW  00
....................  
....................  
.................... void lcd_ini() 
.................... // rotina de inicialização do display 
.................... { 
....................    byte conta; 
....................    output_low(lcd_d4); 
00A7:  BSF    03.5
00A8:  BCF    06.4
00A9:  BCF    03.5
00AA:  BCF    06.4
....................    output_low(lcd_d5); 
00AB:  BSF    03.5
00AC:  BCF    06.5
00AD:  BCF    03.5
00AE:  BCF    06.5
....................    output_low(lcd_d6); 
00AF:  BSF    03.5
00B0:  BCF    06.6
00B1:  BCF    03.5
00B2:  BCF    06.6
....................    output_low(lcd_d7); 
00B3:  BSF    03.5
00B4:  BCF    06.7
00B5:  BCF    03.5
00B6:  BCF    06.7
....................    output_low(lcd_rs); 
00B7:  BSF    03.5
00B8:  BCF    06.1
00B9:  BCF    03.5
00BA:  BCF    06.1
....................    #ifdef lcd_rw 
....................       output_high(lcd_rw); 
....................    #endif 
....................    output_low(lcd_enable); 
00BB:  BSF    03.5
00BC:  BCF    06.0
00BD:  BCF    03.5
00BE:  BCF    06.0
....................    delay_ms(15); 
00BF:  MOVLW  0F
00C0:  MOVWF  2C
00C1:  CALL   051
....................    // envia uma seqüência de 3 vezes 0x03 
....................    // e depois 0x02 para configurar o módulo 
....................    // para modo de 4 bits 
....................    for(conta=1;conta<=3;++conta) 
00C2:  MOVLW  01
00C3:  MOVWF  26
00C4:  MOVF   26,W
00C5:  SUBLW  03
00C6:  BTFSS  03.0
00C7:  GOTO   0D0
....................    { 
....................       lcd_envia_nibble(3); 
00C8:  MOVLW  03
00C9:  MOVWF  33
00CA:  CALL   05F
....................       delay_ms(5); 
00CB:  MOVLW  05
00CC:  MOVWF  2C
00CD:  CALL   051
....................    } 
00CE:  INCF   26,F
00CF:  GOTO   0C4
....................    lcd_envia_nibble(2); 
00D0:  MOVLW  02
00D1:  MOVWF  33
00D2:  CALL   05F
....................    // envia string de inicialização do display 
....................    for(conta=0;conta<=3;++conta) lcd_envia_byte(0,INI_LCD[conta]); 
00D3:  CLRF   26
00D4:  MOVF   26,W
00D5:  SUBLW  03
00D6:  BTFSS  03.0
00D7:  GOTO   0E1
00D8:  MOVF   26,W
00D9:  CALL   004
00DA:  MOVWF  27
00DB:  CLRF   30
00DC:  MOVF   27,W
00DD:  MOVWF  31
00DE:  CALL   086
00DF:  INCF   26,F
00E0:  GOTO   0D4
.................... } 
00E1:  BCF    0A.3
00E2:  BCF    0A.4
00E3:  GOTO   3CA (RETURN)
....................  
.................... void lcd_pos_xy( byte x, byte y) 
.................... { 
....................    byte endereco; 
....................    if(y!=1) 
00E4:  DECFSZ 2D,W
00E5:  GOTO   0E7
00E6:  GOTO   0EA
....................       endereco = lcd_seg_lin; 
00E7:  MOVLW  40
00E8:  MOVWF  2E
....................    else 
00E9:  GOTO   0EB
....................       endereco = 0; 
00EA:  CLRF   2E
....................    endereco += x-1; 
00EB:  MOVLW  01
00EC:  SUBWF  2C,W
00ED:  ADDWF  2E,F
....................    lcd_envia_byte(0,0x80|endereco); 
00EE:  MOVF   2E,W
00EF:  IORLW  80
00F0:  MOVWF  2F
00F1:  CLRF   30
00F2:  MOVF   2F,W
00F3:  MOVWF  31
00F4:  CALL   086
.................... } 
00F5:  RETLW  00
....................  
.................... void lcd_escreve( char c) 
.................... // envia caractere para o display 
.................... { 
....................    switch (c) 
....................    { 
*
0360:  MOVF   2B,W
0361:  XORLW  0C
0362:  BTFSC  03.2
0363:  GOTO   36E
0364:  XORLW  06
0365:  BTFSC  03.2
0366:  GOTO   376
0367:  XORLW  07
0368:  BTFSC  03.2
0369:  GOTO   376
036A:  XORLW  05
036B:  BTFSC  03.2
036C:  GOTO   37C
036D:  GOTO   381
....................      case '\f'    :   lcd_envia_byte(0,1); 
036E:  CLRF   30
036F:  MOVLW  01
0370:  MOVWF  31
0371:  CALL   086
....................               delay_ms(2); 
0372:  MOVLW  02
0373:  MOVWF  2C
0374:  CALL   051
....................             break; 
0375:  GOTO   387
....................      case '\n'   : 
....................      case '\r'    :   lcd_pos_xy(1,2); 
0376:  MOVLW  01
0377:  MOVWF  2C
0378:  MOVLW  02
0379:  MOVWF  2D
037A:  CALL   0E4
....................               break; 
037B:  GOTO   387
....................      case '\b'    :   lcd_envia_byte(0,0x10); 
037C:  CLRF   30
037D:  MOVLW  10
037E:  MOVWF  31
037F:  CALL   086
....................               break; 
0380:  GOTO   387
....................      default   :   lcd_envia_byte(1,c); 
0381:  MOVLW  01
0382:  MOVWF  30
0383:  MOVF   2B,W
0384:  MOVWF  31
0385:  CALL   086
....................               break; 
0386:  GOTO   387
....................    } 
.................... } 
0387:  RETLW  00
....................  
.................... char lcd_le( byte x, byte y) 
.................... // le caractere do display 
.................... { 
....................    char valor; 
....................    // seleciona a posição do caractere 
....................    lcd_pos_xy(x,y); 
....................    // ativa rs 
....................    output_high(lcd_rs); 
....................    // lê o caractere 
....................    valor = lcd_le_byte(); 
....................    // desativa rs 
....................    output_low(lcd_rs); 
....................    // retorna o valor do caractere 
....................    return valor; 
.................... } 
....................  
.................... #fuses  RC, NOWDT, NOBROWNOUT, NOPUT // Diretivas de compilação; 
.................... #fuses  NOPROTECT, NODEBUG // Diretivas de compilação; 
.................... #use    delay (clock=3M) //Configuracao de clock 3MHz para funcao delay 
*
00F6:  MOVLW  26
00F7:  MOVWF  04
00F8:  BCF    03.7
00F9:  MOVF   00,W
00FA:  BTFSC  03.2
00FB:  GOTO   103
00FC:  MOVLW  F8
00FD:  MOVWF  77
00FE:  DECFSZ 77,F
00FF:  GOTO   0FE
0100:  GOTO   101
0101:  DECFSZ 00,F
0102:  GOTO   0FC
0103:  RETLW  00
....................               
.................... int temp_in; 
.................... int temp_set; 
.................... int histerese; 
.................... int A0; 
.................... int A1; 
.................... int A3; 
....................  
.................... void main()  
.................... { 
*
03BD:  CLRF   04
03BE:  BCF    03.7
03BF:  MOVLW  1F
03C0:  ANDWF  03,F
03C1:  BSF    03.5
03C2:  BSF    1F.0
03C3:  BSF    1F.1
03C4:  BSF    1F.2
03C5:  BCF    1F.3
03C6:  MOVLW  07
03C7:  MOVWF  1C
....................    lcd_ini();  // Inicialização do display; 
03C8:  BCF    03.5
03C9:  GOTO   0A7
....................    lcd_pos_xy(2,1);  
03CA:  MOVLW  02
03CB:  MOVWF  2C
03CC:  MOVLW  01
03CD:  MOVWF  2D
03CE:  CALL   0E4
....................    delay_ms(20); 
03CF:  MOVLW  14
03D0:  MOVWF  26
03D1:  CALL   0F6
....................    set_tris_d(0b00000000); 
03D2:  MOVLW  00
03D3:  BSF    03.5
03D4:  MOVWF  08
....................    setup_adc_ports(AN0_AN1_AN3);  //Canal 0 analógico; 
03D5:  BCF    1F.0
03D6:  BCF    1F.1
03D7:  BSF    1F.2
03D8:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL); //Ajuste do clock; 
03D9:  BCF    1F.6
03DA:  BCF    03.5
03DB:  BSF    1F.6
03DC:  BSF    1F.7
03DD:  BSF    03.5
03DE:  BSF    1F.7
03DF:  BCF    03.5
03E0:  BSF    1F.0
....................    set_adc_channel(0);           //Habilita o canal (0) para leitura; 
03E1:  MOVWF  78
03E2:  MOVF   1F,W
03E3:  ANDLW  C7
03E4:  IORWF  78,W
03E5:  MOVWF  1F
....................    delay_ms(20);  
03E6:  MOVLW  14
03E7:  MOVWF  26
03E8:  CALL   0F6
....................     
....................    while (TRUE)  
....................    {                           
....................       set_adc_channel(0);           //Habilita o canal (0) para leitura; 
03E9:  MOVLW  00
03EA:  MOVWF  78
03EB:  MOVF   1F,W
03EC:  ANDLW  C7
03ED:  IORWF  78,W
03EE:  MOVWF  1F
....................       delay_ms(20);                  
03EF:  MOVLW  14
03F0:  MOVWF  26
03F1:  CALL   0F6
....................       A0 =  read_adc(); //Lectura canal0 
03F2:  BSF    1F.2
03F3:  BTFSC  1F.2
03F4:  GOTO   3F3
03F5:  BSF    03.5
03F6:  MOVF   1E,W
03F7:  BCF    03.5
03F8:  MOVWF  23
....................       temp_in = (A0/6.35); // Converte o valor em bits para graus (linear - Ajustar depois para curva) 
03F9:  CLRF   27
03FA:  MOVF   23,W
03FB:  MOVWF  26
03FC:  CALL   104
03FD:  MOVF   7A,W
03FE:  MOVWF  29
03FF:  MOVF   79,W
0400:  MOVWF  28
0401:  MOVF   78,W
0402:  MOVWF  27
0403:  MOVF   77,W
0404:  MOVWF  26
0405:  MOVLW  33
0406:  MOVWF  2D
0407:  MOVWF  2C
0408:  MOVLW  4B
0409:  MOVWF  2B
040A:  MOVLW  81
040B:  MOVWF  2A
040C:  CALL   121
040D:  MOVF   7A,W
040E:  MOVWF  2D
040F:  MOVF   79,W
0410:  MOVWF  2C
0411:  MOVF   78,W
0412:  MOVWF  2B
0413:  MOVF   77,W
0414:  MOVWF  2A
0415:  CALL   1EB
0416:  MOVF   78,W
0417:  MOVWF  20
....................       delay_ms(20);  
0418:  MOVLW  14
0419:  MOVWF  26
041A:  CALL   0F6
....................        
....................       set_adc_channel(1);           //Habilita o canal (0) para leitura; 
041B:  MOVLW  08
041C:  MOVWF  78
041D:  MOVF   1F,W
041E:  ANDLW  C7
041F:  IORWF  78,W
0420:  MOVWF  1F
....................       delay_ms(20);                  
0421:  MOVLW  14
0422:  MOVWF  26
0423:  CALL   0F6
....................       A1 =  read_adc(); //Lectura canal0 
0424:  BSF    1F.2
0425:  BTFSC  1F.2
0426:  GOTO   425
0427:  BSF    03.5
0428:  MOVF   1E,W
0429:  BCF    03.5
042A:  MOVWF  24
....................       temp_set = ((A1/23.18) +36); // Ajusta o setup para 37 à 47 
042B:  CLRF   27
042C:  MOVF   24,W
042D:  MOVWF  26
042E:  CALL   104
042F:  MOVF   7A,W
0430:  MOVWF  29
0431:  MOVF   79,W
0432:  MOVWF  28
0433:  MOVF   78,W
0434:  MOVWF  27
0435:  MOVF   77,W
0436:  MOVWF  26
0437:  MOVLW  A4
0438:  MOVWF  2D
0439:  MOVLW  70
043A:  MOVWF  2C
043B:  MOVLW  39
043C:  MOVWF  2B
043D:  MOVLW  83
043E:  MOVWF  2A
043F:  CALL   121
0440:  MOVF   77,W
0441:  MOVWF  26
0442:  MOVF   78,W
0443:  MOVWF  27
0444:  MOVF   79,W
0445:  MOVWF  28
0446:  MOVF   7A,W
0447:  MOVWF  29
0448:  BCF    03.1
0449:  MOVF   7A,W
044A:  MOVWF  2D
044B:  MOVF   79,W
044C:  MOVWF  2C
044D:  MOVF   78,W
044E:  MOVWF  2B
044F:  MOVF   77,W
0450:  MOVWF  2A
0451:  CLRF   31
0452:  CLRF   30
0453:  MOVLW  10
0454:  MOVWF  2F
0455:  MOVLW  84
0456:  MOVWF  2E
0457:  CALL   20A
0458:  MOVF   7A,W
0459:  MOVWF  2D
045A:  MOVF   79,W
045B:  MOVWF  2C
045C:  MOVF   78,W
045D:  MOVWF  2B
045E:  MOVF   77,W
045F:  MOVWF  2A
0460:  CALL   1EB
0461:  MOVF   78,W
0462:  MOVWF  21
....................       delay_ms(20);  
0463:  MOVLW  14
0464:  MOVWF  26
0465:  CALL   0F6
....................        
....................       set_adc_channel(3);    //Habilita o canal (0) para leitura; 
0466:  MOVLW  18
0467:  MOVWF  78
0468:  MOVF   1F,W
0469:  ANDLW  C7
046A:  IORWF  78,W
046B:  MOVWF  1F
....................       delay_ms(20);                  
046C:  MOVLW  14
046D:  MOVWF  26
046E:  CALL   0F6
....................       A3 =  read_adc(); //Leitura canal0 
046F:  BSF    1F.2
0470:  BTFSC  1F.2
0471:  GOTO   470
0472:  BSF    03.5
0473:  MOVF   1E,W
0474:  BCF    03.5
0475:  MOVWF  25
....................       histerese = A3/51; // Ajusta histerese para 0 a 11 °C 
0476:  MOVF   25,W
0477:  MOVWF  2B
0478:  MOVLW  33
0479:  MOVWF  2C
047A:  CALL   34B
047B:  MOVF   78,W
047C:  MOVWF  22
....................       delay_ms(20);  
047D:  MOVLW  14
047E:  MOVWF  26
047F:  CALL   0F6
....................        
....................        if (temp_in<temp_set) 
0480:  MOVF   21,W
0481:  SUBWF  20,W
0482:  BTFSC  03.0
0483:  GOTO   543
....................           { 
....................            output_d(0b10000000); 
0484:  BSF    03.5
0485:  CLRF   08
0486:  MOVLW  80
0487:  BCF    03.5
0488:  MOVWF  08
....................            delay_ms(20); 
0489:  MOVLW  14
048A:  MOVWF  26
048B:  CALL   0F6
....................            
....................            set_adc_channel(0);    //Habilita o canal (0) para leitura; 
048C:  MOVLW  00
048D:  MOVWF  78
048E:  MOVF   1F,W
048F:  ANDLW  C7
0490:  IORWF  78,W
0491:  MOVWF  1F
....................            delay_ms(20);                  
0492:  MOVLW  14
0493:  MOVWF  26
0494:  CALL   0F6
....................            A0 =  read_adc(); //Lectura canal0 
0495:  BSF    1F.2
0496:  BTFSC  1F.2
0497:  GOTO   496
0498:  BSF    03.5
0499:  MOVF   1E,W
049A:  BCF    03.5
049B:  MOVWF  23
....................            temp_in = (A0/6.35); // Converte o valor em bits para graus (linear - Ajustar depois para curva) 
049C:  CLRF   27
049D:  MOVF   23,W
049E:  MOVWF  26
049F:  CALL   104
04A0:  MOVF   7A,W
04A1:  MOVWF  29
04A2:  MOVF   79,W
04A3:  MOVWF  28
04A4:  MOVF   78,W
04A5:  MOVWF  27
04A6:  MOVF   77,W
04A7:  MOVWF  26
04A8:  MOVLW  33
04A9:  MOVWF  2D
04AA:  MOVWF  2C
04AB:  MOVLW  4B
04AC:  MOVWF  2B
04AD:  MOVLW  81
04AE:  MOVWF  2A
04AF:  CALL   121
04B0:  MOVF   7A,W
04B1:  MOVWF  2D
04B2:  MOVF   79,W
04B3:  MOVWF  2C
04B4:  MOVF   78,W
04B5:  MOVWF  2B
04B6:  MOVF   77,W
04B7:  MOVWF  2A
04B8:  CALL   1EB
04B9:  MOVF   78,W
04BA:  MOVWF  20
....................            delay_ms(20);    
04BB:  MOVLW  14
04BC:  MOVWF  26
04BD:  CALL   0F6
....................             
....................            set_adc_channel(1);   //Habilita o canal (1) para leitura; 
04BE:  MOVLW  08
04BF:  MOVWF  78
04C0:  MOVF   1F,W
04C1:  ANDLW  C7
04C2:  IORWF  78,W
04C3:  MOVWF  1F
....................            delay_ms(20);                  
04C4:  MOVLW  14
04C5:  MOVWF  26
04C6:  CALL   0F6
....................            A1 =  read_adc(); //Leitura canal 1 
04C7:  BSF    1F.2
04C8:  BTFSC  1F.2
04C9:  GOTO   4C8
04CA:  BSF    03.5
04CB:  MOVF   1E,W
04CC:  BCF    03.5
04CD:  MOVWF  24
....................            temp_set = (A1/23.18) +36; // Ajusta o setup para 37 à 47 
04CE:  CLRF   27
04CF:  MOVF   24,W
04D0:  MOVWF  26
04D1:  CALL   104
04D2:  MOVF   7A,W
04D3:  MOVWF  29
04D4:  MOVF   79,W
04D5:  MOVWF  28
04D6:  MOVF   78,W
04D7:  MOVWF  27
04D8:  MOVF   77,W
04D9:  MOVWF  26
04DA:  MOVLW  A4
04DB:  MOVWF  2D
04DC:  MOVLW  70
04DD:  MOVWF  2C
04DE:  MOVLW  39
04DF:  MOVWF  2B
04E0:  MOVLW  83
04E1:  MOVWF  2A
04E2:  CALL   121
04E3:  MOVF   77,W
04E4:  MOVWF  26
04E5:  MOVF   78,W
04E6:  MOVWF  27
04E7:  MOVF   79,W
04E8:  MOVWF  28
04E9:  MOVF   7A,W
04EA:  MOVWF  29
04EB:  BCF    03.1
04EC:  MOVF   7A,W
04ED:  MOVWF  2D
04EE:  MOVF   79,W
04EF:  MOVWF  2C
04F0:  MOVF   78,W
04F1:  MOVWF  2B
04F2:  MOVF   77,W
04F3:  MOVWF  2A
04F4:  CLRF   31
04F5:  CLRF   30
04F6:  MOVLW  10
04F7:  MOVWF  2F
04F8:  MOVLW  84
04F9:  MOVWF  2E
04FA:  CALL   20A
04FB:  MOVF   7A,W
04FC:  MOVWF  2D
04FD:  MOVF   79,W
04FE:  MOVWF  2C
04FF:  MOVF   78,W
0500:  MOVWF  2B
0501:  MOVF   77,W
0502:  MOVWF  2A
0503:  CALL   1EB
0504:  MOVF   78,W
0505:  MOVWF  21
....................            delay_ms(20);  
0506:  MOVLW  14
0507:  MOVWF  26
0508:  CALL   0F6
....................             
....................            printf(lcd_escreve,"\f Tin:%2u   H:%2u\n Tset: %2u ", temp_in, histerese, temp_set); 
0509:  CLRF   26
050A:  MOVF   26,W
050B:  CALL   00C
050C:  INCF   26,F
050D:  MOVWF  77
050E:  MOVWF  2B
050F:  CALL   360
0510:  MOVLW  06
0511:  SUBWF  26,W
0512:  BTFSS  03.2
0513:  GOTO   50A
0514:  MOVF   20,W
0515:  MOVWF  29
0516:  MOVLW  11
0517:  MOVWF  2A
0518:  CALL   388
0519:  MOVLW  09
051A:  MOVWF  27
051B:  MOVF   27,W
051C:  CALL   00C
051D:  INCF   27,F
051E:  MOVWF  77
051F:  MOVWF  2B
0520:  CALL   360
0521:  MOVLW  0E
0522:  SUBWF  27,W
0523:  BTFSS  03.2
0524:  GOTO   51B
0525:  MOVF   22,W
0526:  MOVWF  29
0527:  MOVLW  11
0528:  MOVWF  2A
0529:  CALL   388
052A:  MOVLW  11
052B:  MOVWF  28
052C:  MOVF   28,W
052D:  CALL   00C
052E:  INCF   28,F
052F:  MOVWF  77
0530:  MOVWF  2B
0531:  CALL   360
0532:  MOVLW  19
0533:  SUBWF  28,W
0534:  BTFSS  03.2
0535:  GOTO   52C
0536:  MOVF   21,W
0537:  MOVWF  29
0538:  MOVLW  11
0539:  MOVWF  2A
053A:  CALL   388
053B:  MOVLW  20
053C:  MOVWF  2B
053D:  CALL   360
....................            delay_ms(20); 
053E:  MOVLW  14
053F:  MOVWF  26
0540:  CALL   0F6
....................            break; 
0541:  GOTO   661
....................            } 
....................         else  
0542:  GOTO   660
....................            { 
....................            output_d(0b00000000); 
0543:  BSF    03.5
0544:  CLRF   08
0545:  BCF    03.5
0546:  CLRF   08
....................            delay_ms(20); 
0547:  MOVLW  14
0548:  MOVWF  26
0549:  CALL   0F6
....................             
....................            set_adc_channel(0);    //Habilita o canal (0) para leitura; 
054A:  MOVLW  00
054B:  MOVWF  78
054C:  MOVF   1F,W
054D:  ANDLW  C7
054E:  IORWF  78,W
054F:  MOVWF  1F
....................            delay_ms(20);                  
0550:  MOVLW  14
0551:  MOVWF  26
0552:  CALL   0F6
....................            A0 =  read_adc(); //Lectura canal0 
0553:  BSF    1F.2
0554:  BTFSC  1F.2
0555:  GOTO   554
0556:  BSF    03.5
0557:  MOVF   1E,W
0558:  BCF    03.5
0559:  MOVWF  23
....................            temp_in = (A0/6.35); // Converte o valor em bits para graus (linear - Ajustar depois para curva) 
055A:  CLRF   27
055B:  MOVF   23,W
055C:  MOVWF  26
055D:  CALL   104
055E:  MOVF   7A,W
055F:  MOVWF  29
0560:  MOVF   79,W
0561:  MOVWF  28
0562:  MOVF   78,W
0563:  MOVWF  27
0564:  MOVF   77,W
0565:  MOVWF  26
0566:  MOVLW  33
0567:  MOVWF  2D
0568:  MOVWF  2C
0569:  MOVLW  4B
056A:  MOVWF  2B
056B:  MOVLW  81
056C:  MOVWF  2A
056D:  CALL   121
056E:  MOVF   7A,W
056F:  MOVWF  2D
0570:  MOVF   79,W
0571:  MOVWF  2C
0572:  MOVF   78,W
0573:  MOVWF  2B
0574:  MOVF   77,W
0575:  MOVWF  2A
0576:  CALL   1EB
0577:  MOVF   78,W
0578:  MOVWF  20
....................            delay_ms(20);  
0579:  MOVLW  14
057A:  MOVWF  26
057B:  CALL   0F6
....................             
....................            set_adc_channel(1);   //Habilita o canal (1) para leitura; 
057C:  MOVLW  08
057D:  MOVWF  78
057E:  MOVF   1F,W
057F:  ANDLW  C7
0580:  IORWF  78,W
0581:  MOVWF  1F
....................            delay_ms(20);                  
0582:  MOVLW  14
0583:  MOVWF  26
0584:  CALL   0F6
....................            A1 =  read_adc(); //Leitura canal 1 
0585:  BSF    1F.2
0586:  BTFSC  1F.2
0587:  GOTO   586
0588:  BSF    03.5
0589:  MOVF   1E,W
058A:  BCF    03.5
058B:  MOVWF  24
....................            temp_set = (A1/23.18) +36; // Ajusta o setup para 37 à 47 
058C:  CLRF   27
058D:  MOVF   24,W
058E:  MOVWF  26
058F:  CALL   104
0590:  MOVF   7A,W
0591:  MOVWF  29
0592:  MOVF   79,W
0593:  MOVWF  28
0594:  MOVF   78,W
0595:  MOVWF  27
0596:  MOVF   77,W
0597:  MOVWF  26
0598:  MOVLW  A4
0599:  MOVWF  2D
059A:  MOVLW  70
059B:  MOVWF  2C
059C:  MOVLW  39
059D:  MOVWF  2B
059E:  MOVLW  83
059F:  MOVWF  2A
05A0:  CALL   121
05A1:  MOVF   77,W
05A2:  MOVWF  26
05A3:  MOVF   78,W
05A4:  MOVWF  27
05A5:  MOVF   79,W
05A6:  MOVWF  28
05A7:  MOVF   7A,W
05A8:  MOVWF  29
05A9:  BCF    03.1
05AA:  MOVF   7A,W
05AB:  MOVWF  2D
05AC:  MOVF   79,W
05AD:  MOVWF  2C
05AE:  MOVF   78,W
05AF:  MOVWF  2B
05B0:  MOVF   77,W
05B1:  MOVWF  2A
05B2:  CLRF   31
05B3:  CLRF   30
05B4:  MOVLW  10
05B5:  MOVWF  2F
05B6:  MOVLW  84
05B7:  MOVWF  2E
05B8:  CALL   20A
05B9:  MOVF   7A,W
05BA:  MOVWF  2D
05BB:  MOVF   79,W
05BC:  MOVWF  2C
05BD:  MOVF   78,W
05BE:  MOVWF  2B
05BF:  MOVF   77,W
05C0:  MOVWF  2A
05C1:  CALL   1EB
05C2:  MOVF   78,W
05C3:  MOVWF  21
....................            delay_ms(20);  
05C4:  MOVLW  14
05C5:  MOVWF  26
05C6:  CALL   0F6
....................             
....................            set_adc_channel(3);    //Habilita o canal (0) para leitura; 
05C7:  MOVLW  18
05C8:  MOVWF  78
05C9:  MOVF   1F,W
05CA:  ANDLW  C7
05CB:  IORWF  78,W
05CC:  MOVWF  1F
....................            delay_ms(20);                  
05CD:  MOVLW  14
05CE:  MOVWF  26
05CF:  CALL   0F6
....................            A3 =  read_adc(); //Leitura canal0 
05D0:  BSF    1F.2
05D1:  BTFSC  1F.2
05D2:  GOTO   5D1
05D3:  BSF    03.5
05D4:  MOVF   1E,W
05D5:  BCF    03.5
05D6:  MOVWF  25
....................            histerese = A3/51; // Ajusta histerese para 0 a 11 °C 
05D7:  MOVF   25,W
05D8:  MOVWF  2B
05D9:  MOVLW  33
05DA:  MOVWF  2C
05DB:  CALL   34B
05DC:  MOVF   78,W
05DD:  MOVWF  22
....................            delay_ms(20);  
05DE:  MOVLW  14
05DF:  MOVWF  26
05E0:  CALL   0F6
....................             
....................            printf(lcd_escreve,"\f Tin:%2u   H:%2u\n Tset: %2u ", temp_in, histerese, temp_set); 
05E1:  CLRF   26
05E2:  MOVF   26,W
05E3:  CALL   00C
05E4:  INCF   26,F
05E5:  MOVWF  77
05E6:  MOVWF  2B
05E7:  CALL   360
05E8:  MOVLW  06
05E9:  SUBWF  26,W
05EA:  BTFSS  03.2
05EB:  GOTO   5E2
05EC:  MOVF   20,W
05ED:  MOVWF  29
05EE:  MOVLW  11
05EF:  MOVWF  2A
05F0:  CALL   388
05F1:  MOVLW  09
05F2:  MOVWF  27
05F3:  MOVF   27,W
05F4:  CALL   00C
05F5:  INCF   27,F
05F6:  MOVWF  77
05F7:  MOVWF  2B
05F8:  CALL   360
05F9:  MOVLW  0E
05FA:  SUBWF  27,W
05FB:  BTFSS  03.2
05FC:  GOTO   5F3
05FD:  MOVF   22,W
05FE:  MOVWF  29
05FF:  MOVLW  11
0600:  MOVWF  2A
0601:  CALL   388
0602:  MOVLW  11
0603:  MOVWF  28
0604:  MOVF   28,W
0605:  CALL   00C
0606:  INCF   28,F
0607:  MOVWF  77
0608:  MOVWF  2B
0609:  CALL   360
060A:  MOVLW  19
060B:  SUBWF  28,W
060C:  BTFSS  03.2
060D:  GOTO   604
060E:  MOVF   21,W
060F:  MOVWF  29
0610:  MOVLW  11
0611:  MOVWF  2A
0612:  CALL   388
0613:  MOVLW  20
0614:  MOVWF  2B
0615:  CALL   360
....................            delay_ms(20); 
0616:  MOVLW  14
0617:  MOVWF  26
0618:  CALL   0F6
....................            break; 
0619:  GOTO   661
....................             
....................            if ((temp_set-histerese)>temp_in) 
061A:  MOVF   22,W
061B:  SUBWF  21,W
061C:  SUBWF  20,W
061D:  BTFSC  03.0
061E:  GOTO   660
....................                { 
....................                 output_d(0b10000000); 
061F:  BSF    03.5
0620:  CLRF   08
0621:  MOVLW  80
0622:  BCF    03.5
0623:  MOVWF  08
....................                 delay_ms(20); 
0624:  MOVLW  14
0625:  MOVWF  26
0626:  CALL   0F6
....................                  
....................                 printf(lcd_escreve,"\f Tin:%2u   H:%2u\n  Tset: %2u ", temp_in, histerese, temp_set); 
0627:  CLRF   26
0628:  MOVF   26,W
0629:  CALL   02E
062A:  INCF   26,F
062B:  MOVWF  77
062C:  MOVWF  2B
062D:  CALL   360
062E:  MOVLW  06
062F:  SUBWF  26,W
0630:  BTFSS  03.2
0631:  GOTO   628
0632:  MOVF   20,W
0633:  MOVWF  29
0634:  MOVLW  11
0635:  MOVWF  2A
0636:  CALL   388
0637:  MOVLW  09
0638:  MOVWF  27
0639:  MOVF   27,W
063A:  CALL   02E
063B:  INCF   27,F
063C:  MOVWF  77
063D:  MOVWF  2B
063E:  CALL   360
063F:  MOVLW  0E
0640:  SUBWF  27,W
0641:  BTFSS  03.2
0642:  GOTO   639
0643:  MOVF   22,W
0644:  MOVWF  29
0645:  MOVLW  11
0646:  MOVWF  2A
0647:  CALL   388
0648:  MOVLW  11
0649:  MOVWF  28
064A:  MOVF   28,W
064B:  CALL   02E
064C:  INCF   28,F
064D:  MOVWF  77
064E:  MOVWF  2B
064F:  CALL   360
0650:  MOVLW  1A
0651:  SUBWF  28,W
0652:  BTFSS  03.2
0653:  GOTO   64A
0654:  MOVF   21,W
0655:  MOVWF  29
0656:  MOVLW  11
0657:  MOVWF  2A
0658:  CALL   388
0659:  MOVLW  20
065A:  MOVWF  2B
065B:  CALL   360
....................                 delay_ms(20); 
065C:  MOVLW  14
065D:  MOVWF  26
065E:  CALL   0F6
....................                 break; 
065F:  GOTO   661
....................                } 
....................            } 
....................      } 
0660:  GOTO   3E9
.................... } 
0661:  SLEEP

Configuration Fuses:
   Word  1: 3F3B   RC NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
